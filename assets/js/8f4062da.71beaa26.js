"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9548],{6184:(T,a,e)=>{e.r(a),e.d(a,{assets:()=>w,contentTitle:()=>f,default:()=>p,frontMatter:()=>d,metadata:()=>n,toc:()=>A});var i=e(4848),t=e(8453);const d={id:"pipe"},f=void 0,n={id:"pipe",title:"pipe",description:"pipe() function",source:"@site/docs/pipe.md",sourceDirName:".",slug:"/pipe",permalink:"/docs/pipe",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"pipe"},sidebar:"api",previous:{title:"pickBy",permalink:"/docs/pickBy"},next:{title:"prop",permalink:"/docs/prop"}},w={},A=[{value:"pipe() function",id:"pipe-function",level:2},{value:"Example",id:"example",level:2}];function r(T){const a={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...T.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.h2,{id:"pipe-function",children:"pipe() function"}),"\n",(0,i.jsx)(a.p,{children:"Performs left to right function composition. The first argument can have any value; the remaining arguments must be unary."}),"\n",(0,i.jsx)("b",{children:"Signature:"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:"declare function pipe<T1, R>(a: T1, f1: (a: Awaited<T1>) => R): ReturnPipeType<[T1, R]>;\n\ndeclare function pipe<T1, T2, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => R): ReturnPipeType<[T1, T2, R]>;\n\ndeclare function pipe<T1, T2, T3, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => R): ReturnPipeType<[T1, T2, T3, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => R): ReturnPipeType<[T1, T2, T3, T4, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, T5, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => T5, f5: (a: Awaited<T5>) => R): ReturnPipeType<[T1, T2, T3, T4, T5, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, T5, T6, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => T5, f5: (a: Awaited<T5>) => T6, f6: (a: Awaited<T6>) => R): ReturnPipeType<[T1, T2, T3, T4, T5, T6, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, T5, T6, T7, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => T5, f5: (a: Awaited<T5>) => T6, f6: (a: Awaited<T6>) => T7, f7: (a: Awaited<T7>) => R): ReturnPipeType<[T1, T2, T3, T4, T5, T6, T7, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, T5, T6, T7, T8, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => T5, f5: (a: Awaited<T5>) => T6, f6: (a: Awaited<T6>) => T7, f7: (a: Awaited<T7>) => T8, f8: (a: Awaited<T8>) => R): ReturnPipeType<[T1, T2, T3, T4, T5, T6, T7, T8, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => T5, f5: (a: Awaited<T5>) => T6, f6: (a: Awaited<T6>) => T7, f7: (a: Awaited<T7>) => T8, f8: (a: Awaited<T8>) => T9, f9: (a: Awaited<T9>) => R): ReturnPipeType<[T1, T2, T3, T4, T5, T6, T7, T8, T9, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => T5, f5: (a: Awaited<T5>) => T6, f6: (a: Awaited<T6>) => T7, f7: (a: Awaited<T7>) => T8, f8: (a: Awaited<T8>) => T9, f9: (a: Awaited<T9>) => T10, f10: (a: Awaited<T10>) => R): ReturnPipeType<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => T5, f5: (a: Awaited<T5>) => T6, f6: (a: Awaited<T6>) => T7, f7: (a: Awaited<T7>) => T8, f8: (a: Awaited<T8>) => T9, f9: (a: Awaited<T9>) => T10, f10: (a: Awaited<T10>) => T11, f11: (a: Awaited<T11>) => T12, f12: (a: Awaited<T12>) => R): ReturnPipeType<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => T5, f5: (a: Awaited<T5>) => T6, f6: (a: Awaited<T6>) => T7, f7: (a: Awaited<T7>) => T8, f8: (a: Awaited<T8>) => T9, f9: (a: Awaited<T9>) => T10, f10: (a: Awaited<T10>) => T11, f11: (a: Awaited<T11>) => T12, f12: (a: Awaited<T12>) => T13, f13: (a: Awaited<T13>) => R): ReturnPipeType<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => T5, f5: (a: Awaited<T5>) => T6, f6: (a: Awaited<T6>) => T7, f7: (a: Awaited<T7>) => T8, f8: (a: Awaited<T8>) => T9, f9: (a: Awaited<T9>) => T10, f10: (a: Awaited<T10>) => T11, f11: (a: Awaited<T11>) => T12, f12: (a: Awaited<T12>) => T13, f13: (a: Awaited<T13>) => T14, f14: (a: Awaited<T14>) => R): ReturnPipeType<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => T5, f5: (a: Awaited<T5>) => T6, f6: (a: Awaited<T6>) => T7, f7: (a: Awaited<T7>) => T8, f8: (a: Awaited<T8>) => T9, f9: (a: Awaited<T9>) => T10, f10: (a: Awaited<T10>) => T11, f11: (a: Awaited<T11>) => T12, f12: (a: Awaited<T12>) => T13, f13: (a: Awaited<T13>) => T14, f14: (a: Awaited<T14>) => T15, f15: (a: Awaited<T15>) => R): ReturnPipeType<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => T5, f5: (a: Awaited<T5>) => T6, f6: (a: Awaited<T6>) => T7, f7: (a: Awaited<T7>) => T8, f8: (a: Awaited<T8>) => T9, f9: (a: Awaited<T9>) => T10, f10: (a: Awaited<T10>) => T11, f11: (a: Awaited<T11>) => T12, f12: (a: Awaited<T12>) => T13, f13: (a: Awaited<T13>) => T14, f14: (a: Awaited<T14>) => T15, f15: (a: Awaited<T15>) => T16, f16: (a: Awaited<T16>) => R): ReturnPipeType<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => T5, f5: (a: Awaited<T5>) => T6, f6: (a: Awaited<T6>) => T7, f7: (a: Awaited<T7>) => T8, f8: (a: Awaited<T8>) => T9, f9: (a: Awaited<T9>) => T10, f10: (a: Awaited<T10>) => T11, f11: (a: Awaited<T11>) => T12, f12: (a: Awaited<T12>) => T13, f13: (a: Awaited<T13>) => T14, f14: (a: Awaited<T14>) => T15, f15: (a: Awaited<T15>) => T16, f16: (a: Awaited<T16>) => T17, f17: (a: Awaited<T17>) => R): ReturnPipeType<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => T5, f5: (a: Awaited<T5>) => T6, f6: (a: Awaited<T6>) => T7, f7: (a: Awaited<T7>) => T8, f8: (a: Awaited<T8>) => T9, f9: (a: Awaited<T9>) => T10, f10: (a: Awaited<T10>) => T11, f11: (a: Awaited<T11>) => T12, f12: (a: Awaited<T12>) => T13, f13: (a: Awaited<T13>) => T14, f14: (a: Awaited<T14>) => T15, f15: (a: Awaited<T15>) => T16, f16: (a: Awaited<T16>) => T17, f17: (a: Awaited<T17>) => T18, f18: (a: Awaited<T18>) => R): ReturnPipeType<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => T5, f5: (a: Awaited<T5>) => T6, f6: (a: Awaited<T6>) => T7, f7: (a: Awaited<T7>) => T8, f8: (a: Awaited<T8>) => T9, f9: (a: Awaited<T9>) => T10, f10: (a: Awaited<T10>) => T11, f11: (a: Awaited<T11>) => T12, f12: (a: Awaited<T12>) => T13, f13: (a: Awaited<T13>) => T14, f14: (a: Awaited<T14>) => T15, f15: (a: Awaited<T15>) => T16, f16: (a: Awaited<T16>) => T17, f17: (a: Awaited<T17>) => T18, f18: (a: Awaited<T18>) => T19, f19: (a: Awaited<T19>) => R): ReturnPipeType<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => T5, f5: (a: Awaited<T5>) => T6, f6: (a: Awaited<T6>) => T7, f7: (a: Awaited<T7>) => T8, f8: (a: Awaited<T8>) => T9, f9: (a: Awaited<T9>) => T10, f10: (a: Awaited<T10>) => T11, f11: (a: Awaited<T11>) => T12, f12: (a: Awaited<T12>) => T13, f13: (a: Awaited<T13>) => T14, f14: (a: Awaited<T14>) => T15, f15: (a: Awaited<T15>) => T16, f16: (a: Awaited<T16>) => T17, f17: (a: Awaited<T17>) => T18, f18: (a: Awaited<T18>) => T19, f19: (a: Awaited<T19>) => T20, f20: (a: Awaited<T20>) => R): ReturnPipeType<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, R]>;\n"})}),"\n",(0,i.jsx)(a.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-ts",children:"pipe(\r\n [1, 2, 3, 4, 5],\r\n map(a => a + 10),\r\n filter(a => a % 2 === 0),\r\n toArray,\r\n); // [12, 14]\r\n\r\nawait pipe(\r\n Promise.resolve([1, 2, 3, 4, 5]),\r\n map(a => a + 10),\r\n filter(a => a % 2 === 0),\r\n toArray,\r\n); // [12, 14]\r\n\r\n// if you want to use asynchronous callback\r\nawait pipe(\r\n Promise.resolve([1, 2, 3, 4, 5]),\r\n toAsync,\r\n map(async (a) => a + 10),\r\n filter((a) => a % 2 === 0),\r\n toArray,\r\n); // [12, 14]\r\n\r\n// with toAsync\r\nawait pipe(\r\n [Promise.resolve(1), Promise.resolve(2), Promise.resolve(3), Promise.resolve(4), Promise.resolve(5)],\r\n toAsync,\r\n map(a => a + 10),\r\n filter(a => a % 2 === 0),\r\n toArray,\r\n); // [12, 14]\n"})}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)(a.a,{href:"https://codesandbox.io/s/fxts-toarray-fy84i",children:"Try It"})}),"\n",(0,i.jsxs)(a.p,{children:["see ",(0,i.jsx)(a.a,{href:"https://fxts.dev/docs/pipe",children:"pipe"}),", ",(0,i.jsx)(a.a,{href:"https://fxts.dev/docs/toAsync",children:"toAsync"}),", ",(0,i.jsx)(a.a,{href:"https://fxts.dev/docs/map",children:"map"}),", ",(0,i.jsx)(a.a,{href:"https://fxts.dev/docs/filter",children:"filter"})]}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)(a.a,{href:"https://github.com/marpple/FxTS/blob/main/src/pipe.ts",children:"Open Source Code"})})]})}function p(T={}){const{wrapper:a}={...(0,t.R)(),...T.components};return a?(0,i.jsx)(a,{...T,children:(0,i.jsx)(r,{...T})}):r(T)}},8453:(T,a,e)=>{e.d(a,{R:()=>f,x:()=>n});var i=e(6540);const t={},d=i.createContext(t);function f(T){const a=i.useContext(d);return i.useMemo((function(){return"function"==typeof T?T(a):{...a,...T}}),[a,T])}function n(T){let a;return a=T.disableParentContext?"function"==typeof T.components?T.components(t):T.components||t:f(T.components),i.createElement(d.Provider,{value:a},T.children)}}}]);