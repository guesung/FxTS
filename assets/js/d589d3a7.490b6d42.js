"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7162],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(f,l(l({ref:t},p),{},{components:n})):r.createElement(f,l({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9390:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=["components"],o={id:"getting-started"},s="Getting Started",c={unversionedId:"getting-started",id:"getting-started",isDocsHomePage:!1,title:"Getting Started",description:"Introduction",source:"@site/docs/getting-started.md",sourceDirName:".",slug:"/getting-started",permalink:"/docs/getting-started",tags:[],version:"current",frontMatter:{id:"getting-started"},sidebar:"docs",next:{title:"Function Composition",permalink:"/docs/function-composition"}},p=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"Installation",id:"installation",children:[{value:"NPM",id:"npm",children:[],level:3},{value:"Yarn",id:"yarn",children:[],level:3}],level:2},{value:"Usage",id:"usage",children:[{value:"TypeScript",id:"typescript",children:[],level:3},{value:"JavaScript",id:"javascript",children:[{value:"ESM",id:"esm",children:[],level:4},{value:"CJS",id:"cjs",children:[],level:4}],level:3},{value:"CDN",id:"cdn",children:[],level:3}],level:2}],u={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"getting-started"},"Getting Started"),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"FxTS is a library for functional programming using iterable/asyncIterable.\nIt provides users to write more declarative code, as well as to handle asynchronous data and functions."),(0,i.kt)("p",null,"To build the above, we have many features such as:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Lazy evaluation",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"It is a useful way to represent large or possibly infinite enumerable data."))),(0,i.kt)("li",{parentName:"ul"},"Handling concurrent requests",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"It can handle multiple asynchronous requests and also control the count of requests."))),(0,i.kt)("li",{parentName:"ul"},"Type inference",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Function composition can be inferred."))),(0,i.kt)("li",{parentName:"ul"},"Follow ",(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols"},"iteration protocols")," Iterable / AsyncIterable",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"FxTS follows the protocol of the language standard.\nThis means that it matches well with existing functions and functions that will be added in the future.")))),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("h3",{id:"npm"},"NPM"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"npm install @fxts/core\n")),(0,i.kt)("h3",{id:"yarn"},"Yarn"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"yarn add @fxts/core\n")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("h3",{id:"typescript"},"TypeScript"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { filter, map, pipe, range, reduce, take } from \"@fxts/core\";\n\nconst sum = pipe(\n  range(Infinity),\n  filter((a) => a % 5 === 0),\n  map((a) => a * 10),\n  take(10),\n  reduce((a, b) => a + b),\n); // typeof 'sum' inferred as the number\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note: It is recommended to enable ",(0,i.kt)("a",{parentName:"strong",href:"https://www.typescriptlang.org/tsconfig#strictFunctionTypes"},"strictFunctionTypes"),", ",(0,i.kt)("a",{parentName:"strong",href:"https://www.typescriptlang.org/tsconfig#strictNullChecks"},"strictNullChecks")," tsc option. If not, type inference does not work as we expected. For example, in the example above, ",(0,i.kt)("inlineCode",{parentName:"strong"},"sum")," is not inferred as a number type if the option is turned off.")),(0,i.kt)("h3",{id:"javascript"},"JavaScript"),(0,i.kt)("p",null,"Usage is the same as TypeScript, but there are several points to note."),(0,i.kt)("h4",{id:"esm"},"ESM"),(0,i.kt)("p",null,"As shown in the example code below, the module imported by default was built targeting ",(0,i.kt)("inlineCode",{parentName:"p"},"es2018")," and ",(0,i.kt)("strong",{parentName:"p"},"does not include polyfill"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'import { filter, map, pipe, range, reduce, take } from "@fxts/core";\n')),(0,i.kt)("p",null,"If JavaScript runtime you use does not support ",(0,i.kt)("inlineCode",{parentName:"p"},"es2018"),", use ",(0,i.kt)("inlineCode",{parentName:"p"},"esm5")," submodule instead as shown below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'import { filter, map, pipe, range, reduce, take } from "@fxts/core/esm5";\n')),(0,i.kt)("h4",{id:"cjs"},"CJS"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const { filter, map, pipe, range, reduce } = require("@fxts/core");\n\n// It can be loaded as an individual function\nconst take = require("@fxts/core/Lazy/take").default;\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note: ",(0,i.kt)("inlineCode",{parentName:"strong"},"esm5")," and ",(0,i.kt)("inlineCode",{parentName:"strong"},"cjs")," submodules were built targeting ",(0,i.kt)("inlineCode",{parentName:"strong"},"es5"),", and also does not include polyfill.")),(0,i.kt)("h3",{id:"cdn"},"CDN"),(0,i.kt)("p",null,"This script was built targeting ",(0,i.kt)("inlineCode",{parentName:"p"},"es5")," and contains polyfill."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<script src="https://cdn.jsdelivr.net/npm/@fxts/core/dist/fx.min.js"><\/script>\n')))}d.isMDXComponent=!0}}]);