"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6598],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),l=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(u.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(t),m=a,f=d["".concat(u,".").concat(m)]||d[m]||s[m]||o;return t?r.createElement(f,c(c({ref:n},p),{},{components:t})):r.createElement(f,c({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,c=new Array(o);c[0]=d;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var l=2;l<o;l++)c[l]=t[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6970:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return u},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),c=["components"],i={id:"reduce"},u=void 0,l={unversionedId:"reduce",id:"reduce",isDocsHomePage:!1,title:"reduce",description:"reduce() function",source:"@site/docs/reduce.md",sourceDirName:".",slug:"/reduce",permalink:"/docs/reduce",tags:[],version:"current",frontMatter:{id:"reduce"},sidebar:"api",previous:{title:"props",permalink:"/docs/props"},next:{title:"size",permalink:"/docs/size"}},p=[{value:"reduce() function",id:"reduce-function",children:[],level:2},{value:"Example",id:"example",children:[],level:2}],s={toc:p};function d(e){var n=e.components,t=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"reduce-function"},"reduce() function"),(0,o.kt)("p",null,"Also known as foldl, this method boils down a list of values into a single value."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Signature:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"declare function reduce<T extends readonly [], Acc>(f: Arrow, seed: Acc, iterable: T): Acc;\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns:")),(0,o.kt)("p",null,"Acc"),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"You can reduce values into homogeneous type."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const sum = (a:number, b:number) => a + b;\n\n// with implicit seed with first element\nreduce(sum, [1, 2, 3, 4]); // 10\n\n// with explicit seed\nreduce(sum, 0, [1, 2, 3, 4]); // 10\n")),(0,o.kt)("p",null,"You can reduce values into heterogeneous type."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// reduce { id: number; score: number; } to number\nreduce((acc, value) => acc + value.score, 0, [\n { id: 0, score: 1 },\n { id: 5, score: 2 },\n { id: 9, score: 3 },\n { id: 3, score: 4 }\n])\n")),(0,o.kt)("p",null,"Omitting iterable will returns function, useful when using with pipe."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"pipe(\n [1, 2, 3, 4],\n map(a => a + 10),\n filter(a => a % 2 === 0),\n reduce(sum),\n); // 26\n")),(0,o.kt)("p",null,"For backward compatibility, ",(0,o.kt)("inlineCode",{parentName:"p"},"reduce")," can support partial lazy form. You may want to use ",(0,o.kt)("inlineCode",{parentName:"p"},"reduceLazy")," to use ",(0,o.kt)("inlineCode",{parentName:"p"},"seed"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"await pipe(\n Promise.resolve([1, 2, 3, 4]),\n map((a) => a + 10),\n filter(a => a % 2 === 0),\n reduce(sum),\n); // 26\n\n// if you want to use asynchronous callback\nawait pipe(\n Promise.resolve([1, 2, 3, 4]),\n toAsync,\n map(async (a) => a + 10),\n filter(a => a % 2 === 0),\n reduce(sum),\n); // 26\n\n// with toAsync\nawait pipe(\n [Promise.resolve(1), Promise.resolve(2), Promise.resolve(3), Promise.resolve(4)],\n toAsync,\n map(a => a + 10),\n filter(a => a % 2 === 0),\n reduce(sum),\n); // 26\n")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/fxts-reduce-tf56j"},"Try It")),(0,o.kt)("p",null,"see ",(0,o.kt)("a",{parentName:"p",href:"https://fxts.dev/docs/pipe"},"pipe"),", ",(0,o.kt)("a",{parentName:"p",href:"https://fxts.dev/docs/toAsync"},"toAsync"),", ",(0,o.kt)("a",{parentName:"p",href:"https://fxts.dev/docs/map"},"map"),", ",(0,o.kt)("a",{parentName:"p",href:"https://fxts.dev/docs/filter"},"filter")))}d.isMDXComponent=!0}}]);