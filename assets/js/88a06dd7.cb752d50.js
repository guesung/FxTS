"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8609],{4086:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(4848),o=n(8453);const i={id:"how-to-debug"},r="How to debug in pipeline easily?",s={id:"how-to-debug",title:"How to debug in pipeline easily?",description:"Strict evaluation",source:"@site/docs/how-to-debug.md",sourceDirName:".",slug:"/how-to-debug",permalink:"/docs/how-to-debug",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"how-to-debug"},sidebar:"docs",previous:{title:"When to use the toAsync function?",permalink:"/docs/to-async"}},l={},c=[{value:"Strict evaluation",id:"strict-evaluation",level:2},{value:"Lazy evaluation",id:"lazy-evaluation",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"how-to-debug-in-pipeline-easily",children:"How to debug in pipeline easily?"}),"\n",(0,a.jsx)(t.h2,{id:"strict-evaluation",children:"Strict evaluation"}),"\n",(0,a.jsxs)(t.p,{children:["In strictly-evaluated pipeline, you can track changing of the value in the middle of the pipeline by using the ",(0,a.jsx)(t.code,{children:"tap"})," function.\nIf you want to know more about the ",(0,a.jsx)(t.code,{children:"tap"})," function, see ",(0,a.jsx)(t.a,{href:"https://fxts.dev/docs/tap",children:"here"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"pipe(\n  \"2021/11/25\",\n  (str) => str.split(\"/\"),\n  tap((a) => console.log(a)), // ['2021', '11', '25']\n  (date) => date.map(Number),\n  tap((a) => console.log(a)), // [2021, 11, 25]\n  (date) => date.map((n) => (n === 1 ? 1 : n - 1)),\n  tap((a) => console.log(a)), // [2020, 10, 24]\n  (date) => new Date(...date),\n);\n"})}),"\n",(0,a.jsx)(t.h2,{id:"lazy-evaluation",children:"Lazy evaluation"}),"\n",(0,a.jsxs)(t.p,{children:["The code below creates a list of the 13th of Fridays, starting from January 1, 2000. Each function in the pipeline returns an ",(0,a.jsx)(t.code,{children:"IterableIterator"}),", Which means nothing happens until the ",(0,a.jsx)(t.code,{children:"toArray"})," function iterates through the ",(0,a.jsx)(t.code,{children:"iterable"})," and evaluates the value."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"const addDate = (from: Date, n: number) => {\n  const clone = new Date(from);\n  clone.setDate(n);\n  return clone;\n};\nconst addDateFrom = (from: Date) => (n: number) => addDate(from, n);\nconst is13thOfFriday = (date: Date) =>\n  date.getDate() === 13 && date.getDay() === 5;\nconst formatYYYYMMDD = (date: Date) => {\n  return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;\n};\n\npipe(\n  range(1, Infinity),\n  map(addDateFrom(new Date(2000, 0, 1))),\n  filter(is13thOfFriday),\n  map(formatYYYYMMDD),\n  take(5),\n  toArray,\n  console.log,\n);\n// ['2000-10-13', '2001-4-13', '2001-7-13', '2002-9-13', '2002-12-13']\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Therefore, even if the logs are in the middle of the pipeline using the ",(0,a.jsx)(t.code,{children:"tap"})," function, It is hard to trace the actual evaluation process. Maybe you will only know that type of value is ",(0,a.jsx)(t.code,{children:"IterableIterator"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"pipe(\n  range(1, Infinity),\n  map(addDateFrom(new Date(2000, 0, 1))),\n  filter(is13thOfFriday),\n  tap(console.log), // IterableIterator\n  map(formatYYYYMMDD),\n  tap(console.log), // IterableIterator\n  take(5),\n  toArray,\n);\n"})}),"\n",(0,a.jsxs)(t.p,{children:["If you want to track the progress of this lazy evaluation, you can use the ",(0,a.jsx)(t.a,{href:"https://fxts.dev/docs/peek",children:"peek"})," function."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"pipe(\n  range(1, Infinity),\n  map(addDateFrom(new Date(2000, 0, 1))),\n  filter(is13thOfFriday),\n  peek(console.log),\n  map(formatYYYYMMDD),\n  peek(console.log),\n  take(5),\n  toArray,\n);\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://codesandbox.io/s/how-to-debug-t2tmb?file=/src/index.ts",children:"The entire code is here."})}),"\n",(0,a.jsxs)(t.p,{children:["To check for lazy evaluation in FxTS, see the ",(0,a.jsx)(t.a,{href:"https://fxts.dev/docs/lazy-evaluation",children:"Lazy evaluation"})]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>s});var a=n(6540);const o={},i=a.createContext(o);function r(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);