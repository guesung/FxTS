"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1028],{1498:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>i,toc:()=>o});var c=r(4848),s=r(8453);const t={id:"reduce"},a=void 0,i={id:"reduce",title:"reduce",description:"reduce() function",source:"@site/docs/reduce.md",sourceDirName:".",slug:"/reduce",permalink:"/docs/reduce",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"reduce"},sidebar:"api",previous:{title:"props",permalink:"/docs/props"},next:{title:"reduceLazy",permalink:"/docs/reduceLazy"}},d={},o=[{value:"reduce() function",id:"reduce-function",level:2},{value:"Example",id:"example",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h2,{id:"reduce-function",children:"reduce() function"}),"\n",(0,c.jsx)(n.p,{children:"Also known as foldl, this method boils down a list of values into a single value."}),"\n",(0,c.jsx)("b",{children:"Signature:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:"declare function reduce<T>(f: SyncReducer<T, T>, iterable: Iterable<T>): T;\n\ndeclare function reduce<T, Acc>(f: SyncReducer<Acc, T>, iterable: Iterable<T>): Acc;\n\ndeclare function reduce<T>(f: SyncReducer<T, T>, iterable: AsyncIterable<T>): Promise<T>;\n\ndeclare function reduce<T extends readonly [], Acc>(f: Arrow, seed: Acc, iterable: T): Acc;\n\ndeclare function reduce<T, Acc>(f: SyncReducer<Acc, T>, seed: Acc, iterable: Iterable<T>): Acc;\n\ndeclare function reduce<T, Acc>(f: AsyncReducer<Acc, T>, iterable: AsyncIterable<T>): Promise<Acc>;\n\ndeclare function reduce<T, Acc>(f: AsyncReducer<Acc, T>, seed: Acc | Promise<Acc>, iterable: AsyncIterable<T>): Promise<Acc>;\n\ndeclare function reduce<T extends Iterable<unknown> | AsyncIterable<unknown>, Acc>(f: AsyncReducer<Acc, IterableInfer<T>>): (iterable: T) => ReturnValueType<T, Acc>;\n\ndeclare function reduce<T extends Iterable<unknown> | AsyncIterable<unknown>>(f: AsyncReducer<IterableInfer<T>, IterableInfer<T>>): (iterable: T) => ReturnValueType<T>;\n"})}),"\n",(0,c.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,c.jsx)(n.p,{children:"You can reduce values into homogeneous type."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:"const sum = (a:number, b:number) => a + b;\r\n\r\n// with implicit seed with first element\r\nreduce(sum, [1, 2, 3, 4]); // 10\r\n\r\n// with explicit seed\r\nreduce(sum, 0, [1, 2, 3, 4]); // 10\n"})}),"\n",(0,c.jsx)(n.p,{children:"You can reduce values into heterogeneous type."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:"// reduce { id: number; score: number; } to number\r\nreduce((acc, value) => acc + value.score, 0, [\r\n { id: 0, score: 1 },\r\n { id: 5, score: 2 },\r\n { id: 9, score: 3 },\r\n { id: 3, score: 4 }\r\n])\n"})}),"\n",(0,c.jsx)(n.p,{children:"Omitting iterable will returns function, useful when using with pipe."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:"pipe(\r\n [1, 2, 3, 4],\r\n map(a => a + 10),\r\n filter(a => a % 2 === 0),\r\n reduce(sum),\r\n); // 26\n"})}),"\n",(0,c.jsxs)(n.p,{children:["For backward compatibility, ",(0,c.jsx)(n.code,{children:"reduce"})," can support partial lazy form. You may want to use ",(0,c.jsx)(n.code,{children:"reduceLazy"})," to use ",(0,c.jsx)(n.code,{children:"seed"}),"."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:"await pipe(\r\n Promise.resolve([1, 2, 3, 4]),\r\n map((a) => a + 10),\r\n filter(a => a % 2 === 0),\r\n reduce(sum),\r\n); // 26\r\n\r\n// if you want to use asynchronous callback\r\nawait pipe(\r\n Promise.resolve([1, 2, 3, 4]),\r\n toAsync,\r\n map(async (a) => a + 10),\r\n filter(a => a % 2 === 0),\r\n reduce(sum),\r\n); // 26\r\n\r\n// with toAsync\r\nawait pipe(\r\n [Promise.resolve(1), Promise.resolve(2), Promise.resolve(3), Promise.resolve(4)],\r\n toAsync,\r\n map(a => a + 10),\r\n filter(a => a % 2 === 0),\r\n reduce(sum),\r\n); // 26\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.a,{href:"https://codesandbox.io/s/fxts-reduce-tf56j",children:"Try It"})}),"\n",(0,c.jsxs)(n.p,{children:["see ",(0,c.jsx)(n.a,{href:"https://fxts.dev/docs/pipe",children:"pipe"}),", ",(0,c.jsx)(n.a,{href:"https://fxts.dev/docs/toAsync",children:"toAsync"}),", ",(0,c.jsx)(n.a,{href:"https://fxts.dev/docs/map",children:"map"}),", ",(0,c.jsx)(n.a,{href:"https://fxts.dev/docs/filter",children:"filter"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.a,{href:"https://github.com/marpple/FxTS/blob/main/src/reduce.ts",children:"Open Source Code"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>i});var c=r(6540);const s={},t=c.createContext(s);function a(e){const n=c.useContext(t);return c.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),c.createElement(t.Provider,{value:n},e.children)}}}]);