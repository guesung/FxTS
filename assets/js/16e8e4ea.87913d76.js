"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8219],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return y}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=u(t),y=o,f=m["".concat(s,".").concat(y)]||m[y]||p[y]||a;return t?r.createElement(f,i(i({ref:n},l),{},{components:t})):r.createElement(f,i({ref:n},l))}));function y(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var u=2;u<a;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4778:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return l},default:function(){return m}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],c={id:"to-async"},s="When to use the `toAsync` function?",u={unversionedId:"to-async",id:"to-async",isDocsHomePage:!1,title:"When to use the `toAsync` function?",description:"Many functions in FxTS can handle both Iterable and AsyncIterable. For example, the find function can be used as follows.",source:"@site/docs/to-async.md",sourceDirName:".",slug:"/to-async",permalink:"/docs/to-async",tags:[],version:"current",frontMatter:{id:"to-async"},sidebar:"docs",previous:{title:"Method Chaining",permalink:"/docs/method-chaining"},next:{title:"How to debug in pipeline easily?",permalink:"/docs/how-to-debug"}},l=[],p={toc:l};function m(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"when-to-use-the-toasync-function"},"When to use the ",(0,a.kt)("inlineCode",{parentName:"h1"},"toAsync")," function?"),(0,a.kt)("p",null,"Many functions in FxTS can handle both ",(0,a.kt)("inlineCode",{parentName:"p"},"Iterable")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncIterable"),". For example, the ",(0,a.kt)("inlineCode",{parentName:"p"},"find")," function can be used as follows."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const numbers = function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n};\n\nconst asyncNumbers = async function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n};\n\nfind((num) => num === 2, numbers()); // 2\nfind((num) => num === 2, asyncNumbers()); // Promise<2>\n")),(0,a.kt)("p",null,"There is a special point to note. ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncIterable")," can work fine whether the callback function is running synchronously/asynchronously,\nbut ",(0,a.kt)("strong",{parentName:"p"},"You can not iterate over ",(0,a.kt)("inlineCode",{parentName:"strong"},"Iterable")," using asynchronous callback functions or manipulate types ",(0,a.kt)("inlineCode",{parentName:"strong"},"Iterable<Promise<T>>"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const promiseNumbers = function* () {\n  yield Promise.resolve(1);\n  yield Promise.resolve(2);\n  yield Promise.resolve(3);\n};\n\nfind((num) => Promise.resolve(num === 2), numbers()); // not work\nfind((num) => num === 2, promiseNumbers()); // not work\n")),(0,a.kt)("p",null,"In order to handle async using FxTS, the value to iterate must be type of ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncIterable"),".\nIf the callback function is asynchronous or should handle ",(0,a.kt)("inlineCode",{parentName:"p"},"Iterable<Promise<T>>"),", use the ",(0,a.kt)("inlineCode",{parentName:"p"},"toAsync")," function to convert it to ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncIterable"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"await pipe(\n  numbers(), // Iterable<number>\n  toAsync, // AsyncIterable<number>\n  find((num) => Promise.resolve(num === 2)),\n);\n\nawait pipe(\n  promiseNumbers(), // Iterable<Promise<number>>\n  toAsync, // AsyncIterable<number>\n  find((num) => Promise.resolve(num === 2)),\n);\n")))}m.isMDXComponent=!0}}]);