"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9446],{2269:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>c,metadata:()=>l,toc:()=>o});var t=r(4848),a=r(8453);const c={id:"scan"},s=void 0,l={id:"scan",title:"scan",description:"scan() function",source:"@site/docs/scan.md",sourceDirName:".",slug:"/scan",permalink:"/docs/scan",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"scan"},sidebar:"api",previous:{title:"reverse",permalink:"/docs/reverse"},next:{title:"slice",permalink:"/docs/slice"}},i={},o=[{value:"scan() function",id:"scan-function",level:2},{value:"Example",id:"example",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"scan-function",children:"scan() function"}),"\n",(0,t.jsx)(n.p,{children:"Returns a Iterable/AsyncIterable of successively reduced values from the left. It's similar to reduce"}),"\n",(0,t.jsx)("b",{children:"Signature:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"declare function scan<A>(f: (a: A, b: A) => A, iterable: Iterable<A>): IterableIterator<A>;\n\ndeclare function scan<A extends readonly []>(f: Arrow, iterable: A): IterableIterator<never>;\n\ndeclare function scan<A, B>(f: (a: B, b: A) => B, iterable: Iterable<A>): IterableIterator<B>;\n\ndeclare function scan<A extends readonly [], B>(f: Arrow, seed: B, iterable: A): IterableIterator<B>;\n\ndeclare function scan<A, B>(f: (a: B, b: A) => B, seed: B, iterable: Iterable<A>): IterableIterator<B>;\n\ndeclare function scan<A>(f: (a: A, b: A) => A | Promise<A>, iterable: AsyncIterable<A>): AsyncIterableIterator<A>;\n\ndeclare function scan<A, B>(f: (a: Awaited<B>, b: A) => B | Promise<B>, iterable: AsyncIterable<A>): AsyncIterableIterator<Awaited<B>>;\n\ndeclare function scan<A, B>(f: (a: Awaited<B>, b: A) => B | Promise<B>, seed: B | Promise<B>, iterable: AsyncIterable<A>): AsyncIterableIterator<B>;\n\ndeclare function scan<A extends Iterable<unknown> | AsyncIterable<unknown>, B>(f: (a: B, b: IterableInfer<A>) => B | Promise<B>): (iterable: A) => ReturnIterableIteratorType<A, B>;\n\ndeclare function scan<A extends Iterable<unknown> | AsyncIterable<unknown>>(f: (a: IterableInfer<A>, b: IterableInfer<A>) => IterableInfer<A> | Promise<IterableInfer<A>>): (iterable: A) => ReturnIterableIteratorType<A, IterableInfer<A>>;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const iter = scan((acc, cur) => acc * cur, 1, [1, 2, 3, 4 ]);\r\niter.next(); // {value: 1, done:false}\r\niter.next(); // {value: 1, done:false}\r\niter.next(); // {value: 2, done:false}\r\niter.next(); // {value: 6, done:false}\r\niter.next(); // {value: 24, done:false}\r\niter.next(); // {value: undefined, done: true}\r\n\r\n// with pipe\r\npipe(\r\n  [1, 2, 3, 4],\r\n  scan((acc, cur) => acc * cur),\r\n  toArray,\r\n); // [1, 2, 6, 24]\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://github.com/marpple/FxTS/blob/main/src/Lazy/scan.ts",children:"Open Source Code"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>l});var t=r(6540);const a={},c=t.createContext(a);function s(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);