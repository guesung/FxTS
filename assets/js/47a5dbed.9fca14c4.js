"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9873],{3905:function(r,e,n){n.d(e,{Zo:function(){return p},kt:function(){return h}});var t=n(7294);function o(r,e,n){return e in r?Object.defineProperty(r,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):r[e]=n,r}function a(r,e){var n=Object.keys(r);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(r);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),n.push.apply(n,t)}return n}function i(r){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){o(r,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(r,e,Object.getOwnPropertyDescriptor(n,e))}))}return r}function c(r,e){if(null==r)return{};var n,t,o=function(r,e){if(null==r)return{};var n,t,o={},a=Object.keys(r);for(t=0;t<a.length;t++)n=a[t],e.indexOf(n)>=0||(o[n]=r[n]);return o}(r,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(r);for(t=0;t<a.length;t++)n=a[t],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(r,n)&&(o[n]=r[n])}return o}var s=t.createContext({}),l=function(r){var e=t.useContext(s),n=e;return r&&(n="function"==typeof r?r(e):i(i({},e),r)),n},p=function(r){var e=l(r.components);return t.createElement(s.Provider,{value:e},r.children)},u={inlineCode:"code",wrapper:function(r){var e=r.children;return t.createElement(t.Fragment,{},e)}},d=t.forwardRef((function(r,e){var n=r.components,o=r.mdxType,a=r.originalType,s=r.parentName,p=c(r,["components","mdxType","originalType","parentName"]),d=l(n),h=o,m=d["".concat(s,".").concat(h)]||d[h]||u[h]||a;return n?t.createElement(m,i(i({ref:e},p),{},{components:n})):t.createElement(m,i({ref:e},p))}));function h(r,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof r||o){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var s in e)hasOwnProperty.call(e,s)&&(c[s]=e[s]);c.originalType=r,c.mdxType="string"==typeof r?r:o,i[1]=c;for(var l=2;l<a;l++)i[l]=n[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4481:function(r,e,n){n.r(e),n.d(e,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var t=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],c={id:"error-handling"},s="Error handling",l={unversionedId:"error-handling",id:"error-handling",isDocsHomePage:!1,title:"Error handling",description:"Error handling is an essential part of any programming.",source:"@site/docs/error-handling.md",sourceDirName:".",slug:"/error-handling",permalink:"/docs/error-handling",tags:[],version:"current",frontMatter:{id:"error-handling"},sidebar:"docs",previous:{title:"Handle Concurrency",permalink:"/docs/handle-concurrency"},next:{title:"Method Chaining",permalink:"/docs/method-chaining"}},p=[{value:"Synchronous error handling",id:"synchronous-error-handling",children:[],level:3},{value:"Asynchronous error handling",id:"asynchronous-error-handling",children:[],level:3},{value:"Concurrency error handling (using Concurrent)",id:"concurrency-error-handling-using-concurrent",children:[],level:3}],u={toc:p};function d(r){var e=r.components,n=(0,o.Z)(r,i);return(0,a.kt)("wrapper",(0,t.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"error-handling"},"Error handling"),(0,a.kt)("p",null,"Error handling is an essential part of any programming."),(0,a.kt)("p",null,"Unlike other libraries, error handling in FxTS does not need to know a specific error handling part.\nSince FxTS follows the protocol of standard, you can easily handle errors with ",(0,a.kt)("inlineCode",{parentName:"p"},"try-catch"),".\nThis means that synchronous/asynchronous error propagation is possible,\nso it is good to use with ",(0,a.kt)("a",{parentName:"p",href:"https://sentry.io/"},"sentry")," or various 3rd party error logging and debugging tools."),(0,a.kt)("h3",{id:"synchronous-error-handling"},"Synchronous error handling"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { map, pipe, take, toArray, toAsync } from "@fxts/core";\n\nconst syncError = (a) => {\n  throw new Error(`err ${a}`);\n};\n\ntry {\n  pipe(\n    [1, 2, 3, 4, 5],\n    map(syncError),\n    filter((a) => a % 2 === 0),\n    toArray,\n  );\n} catch (err) {\n  // handle err\n}\n')),(0,a.kt)("h3",{id:"asynchronous-error-handling"},"Asynchronous error handling"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { filter, map, pipe, toArray, toAsync } from "@fxts/core";\n\nconst fetchAsyncError = (a) => Promise.reject(`err ${a}`);\n\ntry {\n  await pipe(\n    Promise.resolve([1, 2, 3, 4, 5]),\n    toAsync,\n    map(fetchAsyncError),\n    filter((a) => a % 2 === 0),\n    toArray,\n  );\n} catch (err) {\n  // handle err\n}\n\ntry {\n  await pipe(\n    [\n      Promise.resolve(1),\n      Promise.resolve(2),\n      Promise.resolve(3),\n      Promise.resolve(4),\n    ],\n    toAsync,\n    map(fetchAsyncError),\n    filter((a) => a % 2 === 0),\n    toArray,\n  );\n} catch (err) {\n  // handle err\n}\n')),(0,a.kt)("h3",{id:"concurrency-error-handling-using-concurrent"},"Concurrency error handling (using Concurrent)"),(0,a.kt)("p",null,"In the state of concurrent requests, ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncIterable")," is evaluated as many as the number of ",(0,a.kt)("inlineCode",{parentName:"p"},"concurrent")," requests, even if an error occurred earlier.\nThis is the same case where asynchronous requests are executed with ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all"},"Promise.all"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"Promise.all")," is all executed even if one fails."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { concurrent, filter, map, pipe, toArray, toAsync } from "@fxts/core";\n\nconst fetchAsyncError = (a) => {\n  if (a === 3) {\n    return Promise.reject(`err ${a}`);\n  }\n  return a;\n};\n\ntry {\n  await pipe(\n    [\n      Promise.resolve(1),\n      Promise.resolve(2),\n      Promise.resolve(3), // When this item is evaluated, `map` function throws an error.\n      Promise.resolve(4), // This item is also evaluated.\n      Promise.resolve(5), // Is is not evaluated from this item.\n      Promise.resolve(6),\n    ],\n    toAsync,\n    map(fetchAsyncError),\n    filter((a) => a % 2 === 0),\n    concurrent(2), // request 2\n    toArray,\n  );\n} catch (err) {\n  // handle err\n}\n')))}d.isMDXComponent=!0}}]);